#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –æ–±—Ä–∞—Ç–Ω–æ–π –∫–∏–Ω–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è 6-–æ—Å–µ–≤–æ–≥–æ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ —Ä–æ–±–æ—Ç–∞.
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç–∏ —Ç–æ—á–µ–∫ TCP
"""

import math
import numpy as np
from typing import List, Tuple, Optional
from parser import JointLimit

class SimpleRobot:
    def __init__(self, joint_limits: List[JointLimit], base_position: Tuple[float, float, float] = (0, 0, 0)):
        self.joint_limits = joint_limits
        self.base_position = np.array(base_position)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—ã –∑–≤–µ–Ω—å–µ–≤ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ —Ä–æ–±–æ—Ç–∞
        self.link_lengths = [0.5, 0.8, 0.4, 0.2, 0.2, 0.1]  # –¥–ª–∏–Ω—ã –∑–≤–µ–Ω—å–µ–≤ –≤ –º–µ—Ç—Ä–∞—Ö
        self.max_reach = 2.0  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—è–≥–∞–µ–º–æ—Å—Ç—å
        
    def is_point_reachable(self, target_point: Tuple[float, float, float]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç–∏ —Ç–æ—á–∫–∏ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ —Ä–æ–±–æ—Ç–∞.
        """
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–≥—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        return True
        
        target = np.array(target_point)
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç –æ—Å–Ω–æ–≤–∞–Ω–∏—è
        distance_from_base = np.linalg.norm(target - self.base_position)
        
        if distance_from_base > self.max_reach:
            return False
            
        if distance_from_base < 0.1:  # –°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –æ—Å–Ω–æ–≤–∞–Ω–∏—é
            return False
        
        # 2. –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≥–ª–æ–≤ —Å—É—Å—Ç–∞–≤–æ–≤
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        try:
            joint_angles = self._approximate_inverse_kinematics(target)
            if joint_angles is None:
                return False
                
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —É–≥–ª–æ–≤
            for i, angle in enumerate(joint_angles):
                if i >= len(self.joint_limits):
                    continue
                    
                joint_limit = self.joint_limits[i]
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [-180, 180]
                angle = self._normalize_angle(angle)
                
                if not (joint_limit.j_min <= angle <= joint_limit.j_max):
                    return False
                    
            return True
            
        except:
            return False
    
    def _approximate_inverse_kinematics(self, target: np.ndarray) -> Optional[List[float]]:
        """
        –ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è –∫–∏–Ω–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç–∏.
        """
        # –°–º–µ—â–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Ç–æ—á–∫—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—è
        local_target = target - self.base_position
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        r = math.sqrt(local_target[0]**2 + local_target[1]**2)
        z = local_target[2]
        
        # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Å—É—Å—Ç–∞–≤–æ–≤
        try:
            # –°—É—Å—Ç–∞–≤ 1: –ø–æ–≤–æ—Ä–æ—Ç –≤–æ–∫—Ä—É–≥ Z
            joint1 = math.atan2(local_target[1], local_target[0])
            
            # –°—É—Å—Ç–∞–≤ 2: —É–≥–æ–ª –ø–ª–µ—á–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫–æ–Ω –∫–æ—Å–∏–Ω—É—Å–æ–≤ –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
            L1, L2 = self.link_lengths[0], self.link_lengths[1]
            distance = math.sqrt(r**2 + z**2)
            
            if distance > L1 + L2 or distance < abs(L1 - L2):
                return None  # –¢–æ—á–∫–∞ –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–∞
                
            # –£–≥–ª—ã –¥–ª—è –ø–ª–µ—á–∞ –∏ –ª–æ–∫—Ç—è
            cos_angle3 = (L1**2 + L2**2 - distance**2) / (2 * L1 * L2)
            if abs(cos_angle3) > 1:
                return None
                
            joint3 = math.acos(cos_angle3) - math.pi
            
            # –£–≥–æ–ª –ø–ª–µ—á–∞
            alpha = math.atan2(z, r)
            beta = math.acos((L1**2 + distance**2 - L2**2) / (2 * L1 * distance))
            joint2 = alpha - beta
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—É—Å—Ç–∞–≤—ã (–∑–∞–≥–ª—É—à–∫–∏)
            joint4 = 0.0
            joint5 = 0.0
            joint6 = 0.0
            
            return [math.degrees(joint1), math.degrees(joint2), math.degrees(joint3), 
                   math.degrees(joint4), math.degrees(joint5), math.degrees(joint6)]
                   
        except:
            return None
    
    def _normalize_angle(self, angle_deg: float) -> float:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É–≥–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [-180, 180] –≥—Ä–∞–¥—É—Å–æ–≤."""
        while angle_deg > 180:
            angle_deg -= 360
        while angle_deg < -180:
            angle_deg += 360
        return angle_deg
    
    def validate_trajectory(self, waypoints: List[Tuple[float, float, float]]) -> List[bool]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç–∏ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏.
        """
        results = []
        for waypoint in waypoints:
            results.append(self.is_point_reachable(waypoint))
        return results

def check_robot_reachability(problem) -> dict:    
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç–∏ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–æ–±–æ—Ç–∞.
    
    Args:
        problem: –æ–±—ä–µ–∫—Ç Problem —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏
        robot_positions: —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –æ—Å–Ω–æ–≤–∞–Ω–∏–π —Ä–æ–±–æ—Ç–æ–≤ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (0,0,0))
    
    Returns:
        dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–æ–±–æ—Ç–∞
    """
    robot_positions = problem.robot_positions
    
    results = {}
    
    for robot_id in range(problem.K):
        robot = SimpleRobot(problem.joints, robot_positions[robot_id])
        robot_results = {
            'pick_points': [],
            'place_points': [],
            'all_reachable': True
        }
        
        for op in problem.ops:
            pick_reachable = robot.is_point_reachable(op.pick)
            place_reachable = robot.is_point_reachable(op.place)
            
            robot_results['pick_points'].append(pick_reachable)
            robot_results['place_points'].append(place_reachable)
            
            if not (pick_reachable and place_reachable):
                robot_results['all_reachable'] = False
        
        results[robot_id] = robot_results
    
    return results

def print_reachability_report(results: dict):
    """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –æ –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç–∏ —Ç–æ—á–µ–∫."""
    print("\nüîç –û—Ç—á–µ—Ç –æ –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç–∏ —Ç–æ—á–µ–∫:")
    
    for robot_id, robot_results in results.items():
        print(f"\n–†–æ–±–æ—Ç {robot_id}:")
        
        if robot_results['all_reachable']:
            print("  ‚úÖ –í—Å–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç–∏–∂–∏–º—ã")
        else:
            print("  ‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–∫–∏ –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º—ã")
            
        for i, (pick_ok, place_ok) in enumerate(zip(robot_results['pick_points'], robot_results['place_points'])):
            status = "‚úÖ" if pick_ok and place_ok else "‚ùå"
            print(f"    –û–ø–µ—Ä–∞—Ü–∏—è {i}: pick={'‚úÖ' if pick_ok else '‚ùå'} place={'‚úÖ' if place_ok else '‚ùå'} {status}")

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    from parser import parse_input
    
    try:
        problem = parse_input("scenarios/example1.txt")
        results = check_robot_reachability(problem)
        print_reachability_report(results)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
