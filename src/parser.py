import sys
from dataclasses import dataclass
from typing import List, Tuple

@dataclass
class JointLimit:
    j_min: float
    j_max: float
    v_max: float
    a_max: float

@dataclass
class Operation:
    pick: Tuple[float, float, float]
    place: Tuple[float, float, float]
    deadline: float

@dataclass
class Problem:
    K: int
    N: int
    joints: List[JointLimit]
    tool_clearance: float
    safe_dist: float
    ops: List[Operation]
    robot_positions: List[Tuple[float, float, float]] 

def parse_input(path: str) -> Problem:
    with open(path, "r") as f:
        lines = [l.strip() for l in f if l.strip()]

    idx = 0
    
    # –ë–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    if not lines:
        raise ValueError("–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏")
    
    first_line_parts = lines[idx].split()
    if len(first_line_parts) == 2:
        K, N = map(int, first_line_parts)
    elif len(first_line_parts) == 1:
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–±–æ—Ç–æ–≤
        K = int(first_line_parts[0])
        N = 0  # –ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º K={K}, N –±—É–¥–µ—Ç –ø–æ–¥—Å—á–∏—Ç–∞–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞")
    else:
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏: '{lines[idx]}'. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç 'K N' –∏–ª–∏ 'K'")
    
    idx += 1

    robot_positions = []
    for _ in range(K):
        if idx < len(lines):
            coords = list(map(float, lines[idx].split()))
            if len(coords) == 3:  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ —Ä–æ–±–æ—Ç–æ–≤
                robot_positions.append(tuple(coords))
                idx += 1
            else:  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –ø–æ–∑–∏—Ü–∏–π —Ä–æ–±–æ—Ç–æ–≤
                robot_positions.append((0.0, 0.0, 0.0))
                # –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º idx, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—É—Å—Ç–∞–≤–æ–≤
        else:
            robot_positions.append((0.0, 0.0, 0.0))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    joints = []
    for _ in range(6):
        jmin, jmax, vmax, amax = map(float, lines[idx].split()); idx += 1
        joints.append(JointLimit(jmin, jmax, vmax, amax))

    tool_clear, safe_dist = map(float, lines[idx].split()); idx += 1

    ops = []
    if N == 0:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å—Ç—Ä–æ–∫
        remaining_lines = lines[idx:]
        N = len(remaining_lines)
        print(f"üìä –ü–æ–¥—Å—á–∏—Ç–∞–Ω–æ {N} –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞")
    
    for _ in range(N):
        if idx >= len(lines):
            break
        px, py, pz, qx, qy, qz, t = map(float, lines[idx].split()); idx += 1
        ops.append(Operation((px,py,pz),(qx,qy,qz),t))

    return Problem(K, N, joints, tool_clear, safe_dist, ops, robot_positions)  # –î–æ–±–∞–≤–∏–ª–∏ robot_positions


def dump_output(makespan: float, schedules: dict, path: str):
    """
    schedules = { robot_id: [(time,x,y,z),...] }
    """
    with open(path,"w") as f:
        f.write(f"{int(makespan)}\n")
        for rid, frames in schedules.items():
            f.write(f"R{rid} {len(frames)}\n")
            for t,x,y,z in frames:
                f.write(f"{int(t)} {x:.3f} {y:.3f} {z:.3f}\n")
