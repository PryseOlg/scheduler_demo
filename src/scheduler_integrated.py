#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–æ–±–æ—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä—Å–µ—Ä–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
"""
import sys
from ortools.sat.python import cp_model
from collision_checker import check_collision
from parser import parse_input, dump_output, Problem, Operation
from inverse_kinematics import check_robot_reachability, print_reachability_report

def calculate_trajectory_time(pick_point, place_point, operation_time, joints):
    """
    –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–≤–∏–∂–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ —Å —É—á–µ—Ç–æ–º –∫–∏–Ω–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å —Ç—Ä–∞–ø–µ—Ü–µ–∏–¥–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—É—Å—Ç–∞–≤–∞.
    """
    # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ –≤ 3D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
    distance = ((place_point[0] - pick_point[0])**2 + 
                (place_point[1] - pick_point[1])**2 + 
                (place_point[2] - pick_point[2])**2)**0.5
    
    if distance < 1e-6:  # –ï—Å–ª–∏ —Ç–æ—á–∫–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        return int(operation_time)
    
    # –ù–∞—Ö–æ–¥–∏–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π —Å—É—Å—Ç–∞–≤ (—Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º v_max)
    min_v_max = min(joint.v_max for joint in joints)
    min_a_max = min(joint.a_max for joint in joints)
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ TCP –¥–≤–∏–∂–µ—Ç—Å—è —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π
    # —Å–∞–º—ã–º –º–µ–¥–ª–µ–Ω–Ω—ã–º —Å—É—Å—Ç–∞–≤–æ–º. –≠—Ç–æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –¥–ª—è 6-–æ—Å–µ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞.
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —É–≥–ª–æ–≤—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ –ª–∏–Ω–µ–π–Ω—ã–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ)
    # –î–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ —Ä–æ–±–æ—Ç–∞ –æ–±—ã—á–Ω–æ 1-2 –º/—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å TCP
    max_tcp_velocity = min_v_max * 0.01  # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≥—Ä–∞–¥/—Å -> –º/—Å (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
    max_tcp_acceleration = min_a_max * 0.01  # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≥—Ä–∞–¥/—Å¬≤ -> –º/—Å¬≤
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å TCP —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
    max_tcp_velocity = min(max_tcp_velocity, 2.0)  # –º–∞–∫—Å–∏–º—É–º 2 –º/—Å
    max_tcp_acceleration = min(max_tcp_acceleration, 5.0)  # –º–∞–∫—Å–∏–º—É–º 5 –º/—Å¬≤
    
    # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —Ç—Ä–∞–ø–µ—Ü–µ–∏–¥–∞–ª—å–Ω–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é —Å–∫–æ—Ä–æ—Å—Ç–∏
    # –í—Ä–µ–º—è —Ä–∞–∑–≥–æ–Ω–∞ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    t_accel = max_tcp_velocity / max_tcp_acceleration
    
    # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ –∑–∞ –≤—Ä–µ–º—è —Ä–∞–∑–≥–æ–Ω–∞
    dist_accel = 0.5 * max_tcp_acceleration * t_accel * t_accel
    
    if distance <= 2 * dist_accel:
        # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        # –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏
        movement_time = 2 * (distance / max_tcp_acceleration) ** 0.5
    else:
        # –¢—Ä–∞–ø–µ—Ü–µ–∏–¥–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏
        dist_constant = distance - 2 * dist_accel
        t_constant = dist_constant / max_tcp_velocity
        movement_time = 2 * t_accel + t_constant
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
    movement_time_ms = int(movement_time * 1000 * 1.2)  # 20% –∑–∞–ø–∞—Å –Ω–∞ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
    
    # –û–±—â–µ–µ –≤—Ä–µ–º—è = –≤—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è + –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏
    total_time = movement_time_ms + operation_time
    
    return total_time

def assign_operations_to_robots(problem: Problem):
    """
    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–æ–±–æ—Ç–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CP-SAT.
    """
    model = cp_model.CpModel()
    assignments = {}
    
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: assignments[(op_id, robot_id)] = bool
    for op_id in range(problem.N):
        for r in range(problem.K):
            assignments[(op_id, r)] = model.NewBoolVar(f"op{op_id}_r{r}")
    
    # –ö–∞–∂–¥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ–º—É —Ä–æ–±–æ—Ç—É
    for op_id in range(problem.N):
        model.Add(sum(assignments[(op_id, r)] for r in range(problem.K)) == 1)
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è makespan
    makespan = model.NewIntVar(0, 1000000, "makespan")
    
    # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    operation_times = []
    for op in problem.ops:
        time_for_op = calculate_trajectory_time(op.pick, op.place, op.deadline, problem.joints)
        operation_times.append(time_for_op)
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è makespan
    for op_id in range(problem.N):
        for r in range(problem.K):
            model.Add(makespan >= int(operation_times[op_id])).OnlyEnforceIf(assignments[(op_id, r)])
    
    # –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º makespan
    model.Minimize(makespan)
    
    # –†–µ—à–∞–µ–º –∑–∞–¥–∞—á—É
    solver = cp_model.CpSolver()
    status = solver.Solve(model)
    
    if status != cp_model.OPTIMAL:
        return None, None, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ. –°—Ç–∞—Ç—É—Å: {status}"
    
    final_makespan = solver.Value(makespan)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    robot_assignments = {r: [] for r in range(problem.K)}
    for op_id in range(problem.N):
        for r in range(problem.K):
            if solver.Value(assignments[(op_id, r)]):
                robot_assignments[r].append(op_id)
                print(f"–û–ø–µ—Ä–∞—Ü–∏—è {op_id} ‚Üí –†–æ–±–æ—Ç {r}")
    
    return robot_assignments, final_makespan, None

def build_robot_paths(problem: Problem, robot_assignments: dict, makespan: int):
    """
    –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–æ–±–æ—Ç–∞.
    """
    robot_paths = {}
    
    for robot_id, operation_ids in robot_assignments.items():
        if not operation_ids:
            robot_paths[robot_id] = []
            continue
            
        waypoints = []
        current_time = 0
        
        for op_id in operation_ids:
            op = problem.ops[op_id]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É pick
            waypoints.append((current_time, op.pick))
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Ç–æ—á–∫–µ place
            movement_time = calculate_trajectory_time(op.pick, op.place, 0, problem.joints)
            current_time += movement_time
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É place
            waypoints.append((current_time, op.place))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            current_time += op.deadline
        
        robot_paths[robot_id] = waypoints
    
    return robot_paths

def check_all_collisions(robot_paths: dict, safe_dist: float):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–∏ —Ä–æ–±–æ—Ç–æ–≤.
    """
    robot_ids = list(robot_paths.keys())
    collisions = []
    
    for i in range(len(robot_ids)):
        for j in range(i + 1, len(robot_ids)):
            r1, r2 = robot_ids[i], robot_ids[j]
            path1 = [point for time, point in robot_paths[r1]]
            path2 = [point for time, point in robot_paths[r2]]
            
            if path1 and path2:
                collision = check_collision(path1, path2, safe_dist)
                if collision:
                    collisions.append(f"‚ö†Ô∏è –ö–æ–ª–ª–∏–∑–∏—è –º–µ–∂–¥—É –†–æ–±–æ—Ç–æ–º{r1} –∏ –†–æ–±–æ—Ç–æ–º{r2}")
                    print(f"‚ö†Ô∏è –ö–æ–ª–ª–∏–∑–∏—è –º–µ–∂–¥—É –†–æ–±–æ—Ç–æ–º{r1} –∏ –†–æ–±–æ—Ç–æ–º{r2}")
                else:
                    print(f"‚úÖ –ù–µ—Ç –∫–æ–ª–ª–∏–∑–∏–π –º–µ–∂–¥—É –†–æ–±–æ—Ç–æ–º{r1} –∏ –†–æ–±–æ—Ç–æ–º{r2}")
    
    return collisions

def main():
    if len(sys.argv) != 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scheduler_integrated.py <–≤—Ö–æ–¥–Ω–æ–π_—Ñ–∞–π–ª> <–≤—ã—Ö–æ–¥–Ω–æ–π_—Ñ–∞–π–ª>")
        print("–ü—Ä–∏–º–µ—Ä: python scheduler_integrated.py scenarios/example1.txt output.txt")
        sys.exit(1)
    
    input_file = sys.argv[1]
    output_file = sys.argv[2]
    
    print(f"üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {input_file}")
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        problem = parse_input(input_file)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {problem.K} —Ä–æ–±–æ—Ç–æ–≤, {problem.N} –æ–ø–µ—Ä–∞—Ü–∏–π")
        print(f"   Tool clearance: {problem.tool_clearance}, Safe distance: {problem.safe_dist}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç—å —Ç–æ—á–µ–∫
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç—å —Ç–æ—á–µ–∫...")
        reachability_results = check_robot_reachability(problem)
        print_reachability_report(reachability_results)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º—ã–µ —Ç–æ—á–∫–∏
        unreachable_operations = []
        for robot_id, robot_results in reachability_results.items():
            for op_id, (pick_ok, place_ok) in enumerate(zip(robot_results['pick_points'], robot_results['place_points'])):
                if not (pick_ok and place_ok):
                    unreachable_operations.append((robot_id, op_id))
        
        if unreachable_operations:
            print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è {len(unreachable_operations)} –æ–ø–µ—Ä–∞—Ü–∏–π")
            print("   –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏.")
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–æ–±–æ—Ç–∞–º
        print("\nü§ñ –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–æ–±–æ—Ç–∞–º...")
        robot_assignments, makespan, error = assign_operations_to_robots(problem)
        
        if error:
            print(error)
            sys.exit(1)
        
        print(f"‚úÖ Makespan = {makespan} –º—Å")
        
        # –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        print("\nüõ§Ô∏è –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏...")
        robot_paths = build_robot_paths(problem, robot_assignments, makespan)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏...")
        collisions = check_all_collisions(robot_paths, problem.safe_dist)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        schedules = {}
        for robot_id, waypoints in robot_paths.items():
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º (time, point) –≤ (time, x, y, z)
            frames = []
            for time, point in waypoints:
                frames.append((time, point[0], point[1], point[2]))
            schedules[robot_id] = frames
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ {output_file}")
        dump_output(makespan, schedules, output_file)
        
        print("‚úÖ –ì–æ—Ç–æ–≤–æ!")
        
        if collisions:
            print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–ª–ª–∏–∑–∏–∏:")
            for collision in collisions:
                print(f"   {collision}")
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
