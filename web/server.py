#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–æ–±–æ—Ç–æ–≤ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º.
"""
import os
import sys
import json
import subprocess
import tempfile
from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä."""
    return send_from_directory('.', 'visualizer.html')

@app.route('/api/run_scheduler', methods=['POST'])
def run_scheduler():
    """
    API endpoint –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    try:
        data = request.get_json()
        scenario_content = data.get('scenario', '')
        
        if not scenario_content:
            return jsonify({'error': '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ü–µ–Ω–∞—Ä–∏—è'}), 400
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as input_file:
            input_file.write(scenario_content)
            input_file_path = input_file.name
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as output_file:
            output_file_path = output_file.name
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            scheduler_path = os.path.join(os.path.dirname(__file__), '..', 'src', 'scheduler_integrated.py')
            result = subprocess.run([
                sys.executable, scheduler_path, input_file_path, output_file_path
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode != 0:
                return jsonify({
                    'error': f'–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {result.stderr}',
                    'stdout': result.stdout
                }), 500
            
            # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(output_file_path, 'r') as f:
                schedule_content = f.read()
            
            # –ü–∞—Ä—Å–∏–º makespan –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            lines = schedule_content.strip().split('\n')
            makespan = int(lines[0]) if lines else 0
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–±–æ—Ç–æ–≤ –∏ –æ–ø–µ—Ä–∞—Ü–∏–π
            num_robots = len([line for line in lines if line.startswith('R')])
            
            return jsonify({
                'success': True,
                'makespan': makespan,
                'schedule': schedule_content,
                'num_robots': num_robots,
                'output': result.stdout
            })
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                os.unlink(input_file_path)
                os.unlink(output_file_path)
            except:
                pass
                
    except subprocess.TimeoutExpired:
        return jsonify({'error': '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (30 —Å–µ–∫)'}), 500
    except Exception as e:
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/api/scenarios')
def get_scenarios():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
    scenarios_dir = os.path.join(os.path.dirname(__file__), '..', 'scenarios')
    scenarios = []
    
    if os.path.exists(scenarios_dir):
        for filename in os.listdir(scenarios_dir):
            if filename.endswith('.txt'):
                file_path = os.path.join(scenarios_dir, filename)
                try:
                    with open(file_path, 'r') as f:
                        content = f.read()
                    scenarios.append({
                        'name': filename,
                        'content': content
                    })
                except:
                    pass
    
    return jsonify({'scenarios': scenarios})

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞."""
    return jsonify({'status': 'ok', 'message': '–°–µ—Ä–≤–µ—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–æ–±–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç'})

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–æ–±–æ—Ç–æ–≤...")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    app.run(host='0.0.0.0', port=5000, debug=True)
